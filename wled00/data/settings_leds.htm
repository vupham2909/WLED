<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=500" />
    <title>Tùy chỉnh đèn LED</title>
    <script>
      var d = document,
        laprev = 55,
        maxB = 1,
        maxM = 5000,
        maxPB = 4096,
        bquot = 0; //maximum bytes for LED allocation: 5kB for 8266, 32kB for 32
      function H() {
        window.open(
          "https://nghienrgb.com/t/wled-huong-dan-chuc-nang-cai-dat-den-led/28"
        );
      }
      function B() {
        window.open("/settings", "_self");
      }
      function gId(n) {
        return d.getElementById(n);
      }
      function off(n) {
        d.getElementsByName(n)[0].value = -1;
      }
      var timeout;
      function showToast(text, error = false) {
        var x = gId("toast");
        x.innerHTML = text;
        x.className = error ? "error" : "show";
        clearTimeout(timeout);
        x.style.animation = "none";
        timeout = setTimeout(function () {
          x.className = x.className.replace("show", "");
        }, 2900);
      }
      function bLimits(b, p, m) {
        maxB = b;
        maxM = m;
        maxPB = p;
      }
      function pinsOK() {
        var LCs = d.getElementsByTagName("input");
        for (i = 0; i < LCs.length; i++) {
          var nm = LCs[i].name.substring(0, 2);
          //check for pin conflicts
          if (
            nm == "L0" ||
            nm == "L1" ||
            nm == "L2" ||
            nm == "L3" ||
            nm == "L4" ||
            nm == "RL" ||
            nm == "BT" ||
            nm == "IR"
          )
            if (LCs[i].value != "" && LCs[i].value != "-1") {
              if (
                d.um_p &&
                d.um_p.some((e) => e == parseInt(LCs[i].value, 10))
              ) {
                alert(
                  `Xin lỗi, pins ${JSON.stringify(d.um_p)} không dùng được.`
                );
                LCs[i].value = "";
                LCs[i].focus();
                return false;
              } else if (LCs[i].value > 5 && LCs[i].value < 12) {
                alert("Xin lỗi, pins 6-11 không dùng được.");
                LCs[i].value = "";
                LCs[i].focus();
                return false;
              }
              for (j = i + 1; j < LCs.length; j++) {
                var n2 = LCs[j].name.substring(0, 2);
                if (
                  n2 == "L0" ||
                  n2 == "L1" ||
                  n2 == "L2" ||
                  n2 == "L3" ||
                  n2 == "L4" ||
                  n2 == "RL" ||
                  n2 == "BT" ||
                  n2 == "IR"
                )
                  if (LCs[j].value != "" && LCs[i].value == LCs[j].value) {
                    alert(`Pin conflict between ${nm}/${n2}!`);
                    LCs[j].value = "";
                    LCs[j].focus();
                    return false;
                  }
              }
            }
        }
        return true;
      }
      function trySubmit(e) {
        e.preventDefault();
        if (!pinsOK()) {
          e.stopPropagation();
          return false;
        } // Prevent form submission and contact with server
        if (bquot > 100) {
          var msg = "Quá nhiều bóng LEDs có thể điều khiển!";
          if (maxM < 10000)
            msg += "\n\rBạn nên xem xét sử dụng mạch điều khiển ESP32.";
          alert(msg);
        }
        if (d.Sf.checkValidity()) d.Sf.submit(); //https://stackoverflow.com/q/37323914
      }
      function S() {
        GetV();
        setABL();
      }
      function enABL() {
        var en = gId("able").checked;
        d.Sf.LA.value = en ? laprev : 0;
        gId("abl").style.display = en ? "inline" : "none";
        gId("psu2").style.display = en ? "inline" : "none";
        if (d.Sf.LA.value > 0) setABL();
      }
      function enLA() {
        var val = d.Sf.LAsel.value;
        d.Sf.LA.value = val;
        gId("LAdis").style.display = val == 50 ? "inline" : "none";
        UI();
      }
      function setABL() {
        gId("able").checked = true;
        d.Sf.LAsel.value = 50;
        switch (parseInt(d.Sf.LA.value)) {
          case 0:
            gId("able").checked = false;
            enABL();
            break;
          case 30:
            d.Sf.LAsel.value = 30;
            break;
          case 35:
            d.Sf.LAsel.value = 35;
            break;
          case 55:
            d.Sf.LAsel.value = 55;
            break;
          case 255:
            d.Sf.LAsel.value = 255;
            break;
          default:
            gId("LAdis").style.display = "inline";
        }
        gId("m1").innerHTML = maxM;
        d.getElementsByName("Sf")[0].addEventListener("submit", trySubmit);
        UI();
      }
      //returns mem usage
      function getMem(type, len, p0) {
        if (type < 32) {
          if (maxM < 10000 && p0 == 3) {
            //8266 DMA uses 5x the mem
            if (type > 29) return len * 20; //RGBW
            return len * 15;
          } else if (maxM >= 10000) {
            //ESP32 RMT uses double buffer?
            if (type > 29) return len * 8; //RGBW
            return len * 6;
          }
          if (type > 29) return len * 4; //RGBW
          return len * 3;
        }
        if (type > 31 && type < 48) return 5;
        if (type == 44 || type == 45) return len * 4; //RGBW
        return len * 3;
      }
      function UI(change = false) {
        var isRGBW = false,
          memu = 0;

        gId("ampwarning").style.display =
          d.Sf.MA.value > 7200 ? "inline" : "none";

        if (d.Sf.LA.value == 255) laprev = 12;
        else if (d.Sf.LA.value > 0) laprev = d.Sf.LA.value;

        var s = d.getElementsByTagName("select");
        for (i = 0; i < s.length; i++) {
          if (s[i].name.substring(0, 2) == "LT") {
            n = s[i].name.substring(2);
            var type = parseInt(s[i].value, 10);
            gId("p0d" + n).innerHTML =
              type > 49 ? "Data:" : type > 41 ? "Pins:" : "Pin:";
            gId("p1d" + n).innerHTML = type > 49 ? "Clk:" : "";
            var LK = d.getElementsByName("L1" + n)[0];

            memu += getMem(
              type,
              d.getElementsByName("LC" + n)[0].value,
              d.getElementsByName("L0" + n)[0].value
            );

            for (p = 1; p < 5; p++) {
              var LK = d.getElementsByName("L" + p + n)[0];
              if (!LK) continue;
              if (
                (type > 49 && p == 1) ||
                (type > 41 && type < 50 && p + 40 < type)
              ) {
                // TYPE_xxxx values from const.h
                LK.style.display = "inline";
                LK.required = true;
              } else {
                LK.style.display = "none";
                LK.required = false;
                LK.value = "";
              }
            }
            if (
              type == 30 ||
              type == 31 ||
              (type > 40 && type < 46 && type != 43)
            )
              isRGBW = true;
            gId("dig" + n).style.display =
              type > 31 && type < 48 ? "none" : "inline";
            gId("psd" + n).innerHTML =
              type > 31 && type < 48 ? "Index:" : "Start:";
          }
        }

        var myC = d.querySelectorAll(".wc"),
          l = myC.length;
        for (i = 0; i < l; i++) {
          myC[i].style.display = isRGBW ? "inline" : "none";
        }

        if (d.activeElement == d.getElementsByName("LC")[0]) {
          var o = d.getElementsByClassName("iST");
          var i = o.length;
          if (i == 1)
            d.getElementsByName("LC0")[0].value =
              d.getElementsByName("LC")[0].value;
        }

        var LCs = d.getElementsByTagName("input");
        var sLC = 0,
          maxLC = 0;
        for (i = 0; i < LCs.length; i++) {
          var nm = LCs[i].name.substring(0, 2);
          if (nm == "LC" && LCs[i].name !== "LC") {
            var n = LCs[i].name.substring(2);
            var c = parseInt(LCs[i].value, 10);
            if (gId("ls" + n).readOnly) gId("ls" + n).value = sLC;
            if (c) {
              sLC += c;
              if (c > maxLC) maxLC = c;
            }
            continue;
          }
          if (nm == "L0" || nm == "L1") {
            var lc = d.getElementsByName("LC" + LCs[i].name.substring(2))[0];
            lc.max = maxPB;
          }
          if (
            nm == "L0" ||
            nm == "L1" ||
            nm == "L2" ||
            nm == "L3" ||
            nm == "L4" ||
            nm == "RL" ||
            nm == "BT" ||
            nm == "IR"
          )
            if (LCs[i].value != "" && LCs[i].value != "-1") {
              var p = [];
              if (d.um_p && Array.isArray(d.um_p))
                for (k = 0; k < d.um_p.length; k++) p.push(d.um_p[k]);
              for (j = 0; j < LCs.length; j++) {
                if (i == j) continue;
                var n2 = LCs[j].name.substring(0, 2);
                if (
                  n2 == "L0" ||
                  n2 == "L1" ||
                  n2 == "L2" ||
                  n2 == "L3" ||
                  n2 == "L4" ||
                  n2 == "RL" ||
                  n2 == "BT" ||
                  n2 == "IR"
                )
                  if (LCs[j].value != "" && LCs[j].value != "-1")
                    p.push(parseInt(LCs[j].value, 10));
              }
              if (p.some((e) => e == parseInt(LCs[i].value, 10)))
                LCs[i].style.color = "red";
              else LCs[i].style.color = "#fff";
            }
        }

        gId("m0").innerHTML = memu;
        bquot = (memu / maxM) * 100;
        gId("dbar").style.background = `linear-gradient(90deg, ${
          bquot > 60 ? (bquot > 90 ? "red" : "orange") : "#ccc"
        } 0 ${bquot}%%, #444 ${bquot}%% 100%%)`;
        gId("ledwarning").style.display =
          sLC > maxPB || maxLC > 800 || bquot > 80 ? "inline" : "none";
        gId("ledwarning").style.color =
          sLC > maxPB || maxLC > maxPB || bquot > 100 ? "red" : "orange";
        gId("wreason").innerHTML =
          bquot > 80
            ? "80% of max. LED memory" +
              (bquot > 100 ? ` (<b>WARNING: Using over ${maxM}B!</b>)` : "")
            : "800 LEDs per pin";

        var val = Math.ceil((100 + sLC * laprev) / 500) / 2;
        val = val > 5 ? Math.ceil(val) : val;
        var s = "";
        var is12V = d.Sf.LAsel.value == 30;
        var isWS2815 = d.Sf.LAsel.value == 255;
        if (val < 1.02 && !is12V && !isWS2815) {
          s = "Chân 5V của mạch ESP với nguồn USB 1A";
        } else {
          s += is12V ? "12V " : isWS2815 ? "WS2815 12V " : "5V ";
          s += val;
          s += "A supply connected to LEDs";
        }
        var val2 = Math.ceil((100 + sLC * laprev) / 1500) / 2;
        val2 = val2 > 5 ? Math.ceil(val2) : val2;
        var s2 = "(với đa số các hiệu ứng, thì xấp xỉ ~";
        s2 += val2;
        s2 += "A là đủ)<br>";
        gId("psu").innerHTML = s;
        gId("psu2").innerHTML = isWS2815 ? "" : s2;
        gId("json").style.display = d.Sf.IT.value == 8 ? "" : "none";
      }
      function lastEnd(i) {
        if (i < 1) return 0;
        v =
          parseInt(d.getElementsByName("LS" + (i - 1))[0].value) +
          parseInt(d.getElementsByName("LC" + (i - 1))[0].value);
        var type = parseInt(d.getElementsByName("LT" + (i - 1))[0].value);
        if (type > 31 && type < 48) v = 1; //PWM busses
        if (isNaN(v)) return 0;
        return v;
      }
      function addLEDs(n) {
        if (n > 1) {
          maxB = n;
          gId("+").style.display = "inline";
          return;
        }

        var o = d.getElementsByClassName("iST");
        var i = o.length;

        if ((n == 1 && i >= maxB) || (n == -1 && i == 0)) return;

        var f = gId("mLC");
        if (n == 1) {
          // npm run build has trouble minimizing spaces inside string
          var cn = `<div class="iST">
${i > 0 ? '<hr style="width:260px">' : ""}
${i + 1}:
<select name="LT${i}" onchange="UI()">
<option value="22">WS281x</option>
<option value="30">SK6812 RGBW</option>
<option value="31">TM1814</option>
<option value="24">400kHz</option>
<option value="50">WS2801</option>
<option value="51">APA102</option>
<option value="52">LPD8806</option>
<option value="53">P9813</option>
<option value="41">PWM White</option>
<option value="42">PWM WWCW</option>
<option value="43">PWM RGB</option>
<option value="44">PWM RGBW</option>
<option value="45">PWM RGBWC</option>
</select>&nbsp;
Color Order:
<select name="CO${i}">
<option value="0">GRB</option>
<option value="1">RGB</option>
<option value="2">BRG</option>
<option value="3">RBG</option>
<option value="4">BGR</option>
<option value="5">GBR</option>
</select><br>
<span id="p0d${i}">Pin:</span> <input type="number" class="xs" name="L0${i}" min="0" max="33" required onchange="UI()"/>
<span id="p1d${i}">Đồng hồ:</span> <input type="number" class="xs" name="L1${i}" min="0" max="33" onchange="UI()"/>
<span id="p2d${i}"></span><input type="number" class="xs" name="L2${i}" min="0" max="33" onchange="UI()"/>
<span id="p3d${i}"></span><input type="number" class="xs" name="L3${i}" min="0" max="33" onchange="UI()"/>
<span id="p4d${i}"></span><input type="number" class="xs" name="L4${i}" min="0" max="33" onchange="UI()"/>
<br>
<span id="psd${i}">Start:</span> <input type="number" name="LS${i}" id="ls${i}" min="0" max="8191" value="${lastEnd(
            i
          )}" required />&nbsp;
<div id="dig${i}" style="display:inline">
Đếm: <input type="number" name="LC${i}" min="0" max="${maxPB}" value="1" required oninput="UI()" /><br>
Đảo ngược (xoay 180°): <input type="checkbox" name="CV${i}">
&nbsp;Bỏ qua bóng đầu tiên: <input id="sl${i}" type="checkbox" name="SL${i}"><br>
</div>
</div>`;
          f.insertAdjacentHTML("beforeend", cn);
        }
        if (n == -1) {
          o[--i].remove();
          --i;
        }

        gId("+").style.display = i < maxB - 1 ? "inline" : "none";
        gId("-").style.display = i > 0 ? "inline" : "none";

        UI();
      }
      function addBtn(i, p, t) {
        var c = gId("btns").innerHTML;
        var bt = "BT" + i;
        var be = "BE" + i;
        c += `Button ${i} pin: <input type="number" class="xs" min="-1" max="40" name="${bt}" onchange="UI()" value="${p}">&nbsp;`;
        c += `<select name="${be}">`;
        c += `<option value="0" ${t == 0 ? "selected" : ""}>Disabled</option>`;
        c += `<option value="2" ${
          t == 2 ? "selected" : ""
        }>Pushbutton</option>`;
        c += `<option value="3" ${
          t == 3 ? "selected" : ""
        }>Push inverted</option>`;
        c += `<option value="4" ${t == 4 ? "selected" : ""}>Switch</option>`;
        c += `<option value="5" ${
          t == 5 ? "selected" : ""
        }>PIR sensor</option>`;
        c += `<option value="6" ${t == 6 ? "selected" : ""}>Touch</option>`;
        c += `<option value="7" ${t == 7 ? "selected" : ""}>Analog</option>`;
        c += `<option value="8" ${
          t == 8 ? "selected" : ""
        }>Analog inverted</option>`;
        c += `</select>`;
        c += `<span style="cursor: pointer;" onclick="off('${bt}')">&nbsp;&#215;</span><br>`;
        gId("btns").innerHTML = c;
      }
      function uploadFile(name) {
        var req = new XMLHttpRequest();
        req.addEventListener("load", function () {
          showToast(this.responseText);
        });
        req.addEventListener("error", function (e) {
          showToast(e.stack, true);
        });
        req.open("POST", "/upload");
        var formData = new FormData();
        formData.append("data", d.Sf.data.files[0], name);
        req.send(formData);
        d.Sf.data.value = "";
        return false;
      }
      function GetV() {
        //values injected by server while sending HTML
        //maxM=5000;maxPB=1536;d.um_p=[1,6,7,8,9,10,11];addLEDs(3);d.Sf.LC.value=250;addLEDs(1);d.Sf.L00.value=2;d.Sf.L10.value=0;d.Sf.LC0.value=250;d.Sf.LT0.value=22;d.Sf.CO0.value=0;d.Sf.LS0.value=0;d.Sf.LS0.checked=0;d.Sf.MA.value=5400;d.Sf.LA.value=55;d.getElementsByClassName("pow")[0].innerHTML="350mA";d.Sf.CA.value=40;d.Sf.AW.value=3;d.Sf.BO.checked=0;d.Sf.BP.value=3;d.Sf.GB.checked=0;d.Sf.GC.checked=1;d.Sf.TF.checked=1;d.Sf.TD.value=700;d.Sf.PF.checked=0;d.Sf.BF.value=64;d.Sf.TB.value=0;d.Sf.TL.value=60;d.Sf.TW.value=1;d.Sf.PB.selectedIndex=0;d.Sf.RL.value=12;d.Sf.RM.checked=0;addBtn(0,0,2);addBtn(1,3,4);addBtn(2,-1,0);d.Sf.IR.value=-1;
      }
    </script>
    <style>
      @import url("style.css");
    </style>
  </head>
  <body onload="S()">
    <form id="form_s" name="Sf" method="post">
      <div class="helpB"><button type="button" onclick="H()">?</button></div>
      <button type="button" onclick="B()">Quay lại</button
      ><button type="submit">Lưu lại</button>
      <hr />
      <h2>Cài đặt LED và phần cứng LED</h2>
      Tổng số bóng LED:
      <input
        name="LC"
        id="LC"
        type="number"
        min="1"
        max="8192"
        oninput="UI()"
        required
      /><br />
      <i>Nguồn điện đề nghị cho ra màu trắng sáng nhất:</i><br />
      <b><span id="psu">?</span></b
      ><br />
      <span id="psu2"><br /></span>
      <br />
      Bật chế độ tự động giới hạn mức sáng:
      <input type="checkbox" name="ABen" onchange="enABL()" id="able" /><br />
      <div id="abl">
        Cường độ dòng điện tối đa:
        <input
          name="MA"
          type="number"
          class="l"
          min="250"
          max="65000"
          oninput="UI()"
          required
        />
        mA<br />
        <div id="ampwarning" style="color: orange; display: none">
          &#9888; Nguồn điện của bạn cung cấp cường độ cao.<br />
          Để đảm bảo an toàn cho bạn,<br />
          vui lòng sử dụng dây điện dày,<br />
          nhiều điểm kích điện và dùng cầu chì!<br />
        </div>
        <i
          >Tự động giới hạn độ sáng và giữ gần mức giới hạn.<br />
          Bạn nên để &lt;1A nếu cấp nguồn cho đèn LED trực tiếp từ mạch điều
          khiển ESP 5V!<br />
          Nếu bạn sử dụng nguồn ngoài, vui lòng nhập thông số nguồn của bạn.<br />
          (Ước lượng cường độ dòng điện tiêu thụ:
          <span class="pow">Không rõ</span>)</i
        ><br /><br />
        Hiệu điện thế và cường độ bóng led (Cường độ điện tối đa cho một bóng
        led):<br />
        <select name="LAsel" onchange="enLA()">
          <option value="55" selected>Loại 5V mặc định (55mA)</option>
          <option value="35">Loại 5V tiết kiệm (35mA)</option>
          <option value="30">Loại 12V (30mA)</option>
          <option value="255">Loại 12V dây WS2815 (12mA)</option>
          <option value="50">Tùy chỉnh</option></select
        ><br />
        <span id="LAdis" style="display: none"
          >Tùy chỉnh cường độ tối đa một bóng led:
          <input
            name="LA"
            type="number"
            min="0"
            max="255"
            id="la"
            oninput="UI()"
            required />
          mA<br
        /></span>
        <i
          >Hãy giữ giá trị mặc định nếu bạn không thật sự hiểu rõ loại LED bạn
          đang sử dụng là gì.</i
        ><br />
      </div>
      <h3>Cài đặt phần cứng</h3>
      <div id="mLC">LED đầu ra:</div>
      <button
        type="button"
        id="+"
        onclick="addLEDs(1)"
        style="display: none; border-radius: 20px; height: 36px"
      >
        +
      </button>
      <button
        type="button"
        id="-"
        onclick="addLEDs(-1)"
        style="display: none; border-radius: 20px; width: 36px; height: 36px"
      >
        -</button
      ><br />
      Bộ nhớ LED sử dụng: <span id="m0">0</span> /
      <span id="m1">?</span> B<br />
      <div
        id="dbar"
        style="
          display: inline-block;
          width: 100px;
          height: 10px;
          border-radius: 20px;
        "
      ></div>
      <br />
      <div id="ledwarning" style="color: orange; display: none">
        &#9888; Bạn có thể sẽ gặp phải vấn đề bất ổn định hoặc bị lag đèn
        led.<br />
        Hãy dùng ít hơn <span id="wreason">800 bóng LEDs trên một mạch</span> để
        có trải nghiệm tốt nhất!<br />
      </div>
      <hr style="width: 260px" />
      <div id="btns"></div>
      Ngưỡng chạm:
      <input
        type="number"
        class="s"
        min="0"
        max="100"
        name="TT"
        required
      /><br />
      Chân pin hồng ngoại:
      <input
        type="number"
        class="xs"
        min="-1"
        max="40"
        name="IR"
        onchange="UI()"
      />&nbsp;<select name="IT" onchange="UI()">
        <option value="0">Remote disabled</option>
        <option value="1">24-key RGB</option>
        <option value="2">24-key with CT</option>
        <option value="3">40-key blue</option>
        <option value="4">44-key RGB</option>
        <option value="5">21-key RGB</option>
        <option value="6">6-key black</option>
        <option value="7">9-key red</option>
        <option value="8">JSON remote</option></select
      ><span style="cursor: pointer" onclick="off('IR')">&nbsp;&#215;</span
      ><br />
      <div id="json" style="display: none">
        JSON file: <input type="file" name="data" accept=".json" />
        <input
          type="button"
          value="Upload"
          onclick="uploadFile('/ir.json');"
        /><br />
      </div>
      <div id="toast"></div>
      <a
        href="https://github.com/Aircoookie/WLED/wiki/Infrared-Control"
        target="_blank"
        >IR info</a
      ><br />
      Relay pin:
      <input
        type="number"
        class="xs"
        min="-1"
        max="33"
        name="RL"
        onchange="UI()"
      />
      Invert <input type="checkbox" name="RM" /><span
        style="cursor: pointer"
        onclick="off('RL')"
        >&nbsp;&#215;</span
      ><br />
      <hr style="width: 260px" />
      <h3>Mặc định</h3>
      Bật tất cả các LEDs lên sau khi khởi động lại:
      <input type="checkbox" name="BO" /><br />
      Độ sáng mặc định:
      <input name="CA" type="number" class="s" min="0" max="255" required />
      (0-255)<br /><br />
      Sử dụng những cấu hình sẵn
      <input name="BP" type="number" class="s" min="0" max="250" required /> lúc
      khởi động (nhập 0 nếu dùng mặc định) <br /><br />
      Sử dụng tùy chỉnh gamma để điều chỉnh màu:
      <input type="checkbox" name="GC" /> (Rất khuyến khích dùng)<br />
      Sử dụng tùy chỉnh gamma để điều chỉnh độ sáng:
      <input type="checkbox" name="GB" /> (Không khuyến khích dùng)<br /><br />
      Yếu tố sáng:
      <input name="BF" type="number" class="s" min="1" max="255" required /> %
      <h3>Dịch chuyển</h3>
      Làm mờ chéo: <input type="checkbox" name="TF" /><br />
      Thời gian dịch chuyển:
      <input name="TD" type="number" class="l" min="0" max="65500" /> ms<br />
      Bật dịch chuyển theo bảng màu: <input type="checkbox" name="PF" />
      <h3>Định giờ bật sáng</h3>
      Thời lượng mặc định:
      <input name="TL" type="number" class="s" min="1" max="255" required />
      phút <br />
      Đối tượng sáng mặc định:
      <input
        name="TB"
        type="number"
        class="s"
        min="0"
        max="255"
        required
      /><br />
      Chế độ:
      <select name="TW">
        <option value="0">Chờ và thiết lập</option>
        <option value="1">Mờ đi</option>
        <option value="2">Mờ đi theo màu</option>
        <option value="3">Mặt trời mọc</option>
      </select>
      <h3>Nâng cao</h3>
      Trộn màu:
      <select name="PB">
        <option value="0">Tuyến tính (wrap if moving)</option>
        <option value="1">Tuyến tính (always wrap)</option>
        <option value="2">Tuyến tính (never wrap)</option>
        <option value="3">Không chọn (không khuyến khích)</option></select
      ><br />
      <span class="wc">
        Tự động tính toán kênh trắng cho dải màu RGB:<br />
        <select name="AW">
          <option value="0">Không sử dụng</option>
          <option value="1">Sáng hơn</option>
          <option value="2">Chính xác</option>
          <option value="3">Song song</option>
          <option value="4">Loại cũ</option>
        </select>
        <br
      /></span>
      <hr />
      <button type="button" onclick="B()">Quay lại</button
      ><button type="submit">Lưu lại</button>
    </form>
  </body>
</html>
